# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import qdarktheme
from configparser import ConfigParser

class Ui_MainWindow(object):
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowModality(QtCore.Qt.NonModal)
        MainWindow.resize(600, 400)
        MainWindow.setMaximumSize(QtCore.QSize(600, 400))
        MainWindow.setInputMethodHints(QtCore.Qt.ImhHiddenText)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tokenLogin = QtWidgets.QTextEdit(self.centralwidget)
        self.tokenLogin.setGeometry(QtCore.QRect(10, 10, 311, 21))
        self.tokenLogin.setInputMethodHints(QtCore.Qt.ImhHiddenText)
        self.tokenLogin.setObjectName("tokenLogin")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(340, 10, 81, 16))
        self.label.setObjectName("label")
        self.connectStatus = QtWidgets.QLabel(self.centralwidget)
        self.connectStatus.setGeometry(QtCore.QRect(440, 10, 101, 16))
        self.connectStatus.setObjectName("connectStatus")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 70, 111, 16))
        self.label_2.setObjectName("label_2")
        self.login = QtWidgets.QPushButton(self.centralwidget)
        self.login.setGeometry(QtCore.QRect(10, 40, 75, 24))
        self.login.setObjectName("login")
        self.exit = QtWidgets.QPushButton(self.centralwidget)
        self.exit.setGeometry(QtCore.QRect(250, 40, 75, 24))
        self.exit.setObjectName("exit")
        self.status_ComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.status_ComboBox.setGeometry(QtCore.QRect(10, 90, 69, 22))
        self.status_ComboBox.setObjectName("status_ComboBox")
        self.status_ComboBox.addItem("")
        self.status_ComboBox.addItem("")
        self.status_ComboBox.addItem("")
        self.status_ComboBox.addItem("")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(10, 120, 321, 141))
        self.textEdit.setObjectName("textEdit")
        self.setstatusmsg = QtWidgets.QPushButton(self.centralwidget)
        self.setstatusmsg.setGeometry(QtCore.QRect(10, 270, 111, 24))
        self.setstatusmsg.setObjectName("setstatusmsg")
        self.clearstatus = QtWidgets.QPushButton(self.centralwidget)
        self.clearstatus.setGeometry(QtCore.QRect(10, 300, 111, 24))
        self.clearstatus.setObjectName("clearstatus")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 0, 601, 71))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.label_3 = QtWidgets.QLabel(self.frame)
        self.label_3.setGeometry(QtCore.QRect(340, 40, 81, 16))
        self.label_3.setObjectName("label_3")
        self.server_count = QtWidgets.QLabel(self.frame)
        self.server_count.setGeometry(QtCore.QRect(420, 40, 49, 16))
        self.server_count.setObjectName("server_count")
        self.restart = QtWidgets.QPushButton(self.frame)
        self.restart.setGeometry(QtCore.QRect(130, 40, 75, 24))
        self.restart.setObjectName("restart")
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setGeometry(QtCore.QRect(0, 70, 341, 261))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.label_4 = QtWidgets.QLabel(self.frame_2)
        self.label_4.setGeometry(QtCore.QRect(130, 200, 111, 31))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(350, 70, 111, 16))
        self.label_5.setObjectName("label_5")
        self.frame_3 = QtWidgets.QFrame(self.centralwidget)
        self.frame_3.setGeometry(QtCore.QRect(340, 70, 261, 161))
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.sendMSG = QtWidgets.QPushButton(self.frame_3)
        self.sendMSG.setGeometry(QtCore.QRect(10, 130, 111, 24))
        self.sendMSG.setObjectName("sendMSG")
        self.channelID = QtWidgets.QTextEdit(self.frame_3)
        self.channelID.setGeometry(QtCore.QRect(10, 110, 241, 21))
        self.channelID.setObjectName("channelID")
        self.messageBox = QtWidgets.QTextEdit(self.frame_3)
        self.messageBox.setGeometry(QtCore.QRect(10, 20, 241, 91))
        self.messageBox.setObjectName("messageBox")
        self.frame_4 = QtWidgets.QFrame(self.centralwidget)
        self.frame_4.setGeometry(QtCore.QRect(340, 230, 261, 141))
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.announcementPanel = QtWidgets.QTextEdit(self.frame_4)
        self.announcementPanel.setGeometry(QtCore.QRect(10, 20, 241, 91))
        self.announcementPanel.setObjectName("announcementPanel")
        self.sendannouncement = QtWidgets.QPushButton(self.frame_4)
        self.sendannouncement.setGeometry(QtCore.QRect(10, 110, 131, 24))
        self.sendannouncement.setObjectName("sendannouncement")
        self.label_10 = QtWidgets.QLabel(self.frame_4)
        self.label_10.setGeometry(QtCore.QRect(10, 0, 131, 16))
        self.label_10.setObjectName("label_10")
        self.frame_3.raise_()
        self.frame_2.raise_()
        self.frame.raise_()
        self.tokenLogin.raise_()
        self.label.raise_()
        self.connectStatus.raise_()
        self.label_2.raise_()
        self.login.raise_()
        self.exit.raise_()
        self.status_ComboBox.raise_()
        self.textEdit.raise_()
        self.setstatusmsg.raise_()
        self.clearstatus.raise_()
        self.label_5.raise_()
        self.frame_4.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "BotControlPanel"))
        self.tokenLogin.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"hr { height: 1px; border-width: 0; }\n"
"li.unchecked::marker { content: \"\\2610\"; }\n"
"li.checked::marker { content: \"\\2612\"; }\n"
"</style></head><body style=\" font-family:\'Segoe UI\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:700;\">BOT TOKEN HERE (One Line Only)</span></p></body></html>"))
        self.label.setText(_translate("MainWindow", "LOGIN STATUS:"))
        self.connectStatus.setText(_translate("MainWindow", "NOT CONNECTED"))
        self.label_2.setText(_translate("MainWindow", "Bot Status Settings:"))
        self.login.setText(_translate("MainWindow", "LOGIN"))
        self.exit.setText(_translate("MainWindow", "EXIT"))
        self.status_ComboBox.setItemText(0, _translate("MainWindow", "Online"))
        self.status_ComboBox.setItemText(1, _translate("MainWindow", "Do Not Disturb"))
        self.status_ComboBox.setItemText(2, _translate("MainWindow", "Away"))
        self.status_ComboBox.setItemText(3, _translate("MainWindow", "Offline"))
        self.setstatusmsg.setText(_translate("MainWindow", "Set Status Message"))
        self.clearstatus.setText(_translate("MainWindow", "CLEAR STATUS"))
        self.label_3.setText(_translate("MainWindow", "Server Count:"))
        self.server_count.setText(_translate("MainWindow", "nan"))
        self.restart.setText(_translate("MainWindow", "RESTART"))
        self.label_4.setText(_translate("MainWindow", "RESTART REQUIERED"))
        self.label_5.setText(_translate("MainWindow", "Message Panel:"))
        self.sendMSG.setText(_translate("MainWindow", "Send Message"))
        self.channelID.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"hr { height: 1px; border-width: 0; }\n"
"li.unchecked::marker { content: \"\\2610\"; }\n"
"li.checked::marker { content: \"\\2612\"; }\n"
"</style></head><body style=\" font-family:\'Segoe UI\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">SET CHANNEL ID</p></body></html>"))
        self.sendannouncement.setText(_translate("MainWindow", "Send Announcement"))
        self.label_10.setText(_translate("MainWindow", "Announcement Panel"))
        qdarktheme.setup_theme()
        
        config = ConfigParser()
        config.read('outputs.ini')
        
        BotToken = config.get("BOTSETTINGS", "Bot_Token")
        Message = config.get("USER_PREFERENCES", "Message")
        ChannelID = config.get("USER_PREFERENCES", "ChannelID")
        Status = config.get("USER_PREFERENCES", "Status")
        AnnounceMSG = config.get("USER_PREFERENCES", "AnnounceMSG")

        self.login.clicked.connect(self.tokenupdate)
        self.sendMSG.clicked.connect(self.messageupdate)
        self.sendMSG.clicked.connect(self.channelIDupdate)
        self.setstatusmsg.clicked.connect(self.statusUpdate)
        self.clearstatus.clicked.connect(self.clearstatusdef)
        self.setstatusmsg.clicked.connect(self.statusUpdate2)
        self.sendannouncement.clicked.connect(self.announceUpdate)



    def clearstatusdef(self):
        config = ConfigParser()
        config.read('outputs.ini')
        status = self.status_ComboBox.currentText()
        config.set('USER_PREFERENCES', 'statusMsg', "")
        with open('outputs.ini', 'w') as configfile:
            config.write(configfile)

    def tokenupdate(self):
            config = ConfigParser()
            config.read('outputs.ini')
            BotToken = self.tokenLogin.toPlainText()
            config.set('BOTSETTINGS', 'Bot_Token', BotToken)
            with open('outputs.ini', 'w') as configfile:
                config.write(configfile)
    
    def messageupdate(self):
            config = ConfigParser()
            config.read('outputs.ini')
            Message = self.messageBox.toPlainText()
            config.set('USER_PREFERENCES', 'message', Message)
            with open('outputs.ini', 'w') as configfile:
                config.write(configfile)

    def channelIDupdate(self):
        config = ConfigParser()
        config.read('outputs.ini')
        channelid = self.channelID.toPlainText()
        config.set('USER_PREFERENCES', 'channelid', channelid)
        with open('outputs.ini', 'w') as configfile:
            config.write(configfile)
            
    def statusUpdate(self):
        config = ConfigParser()
        config.read('outputs.ini')
        status = str(self.status_ComboBox.currentText())
        config.set('USER_PREFERENCES', 'status', status)
        with open('outputs.ini', 'w') as configfile:
            config.write(configfile)

    def statusUpdate2(self):
        config = ConfigParser()
        config.read('outputs.ini')
        statusMSG = self.textEdit.toPlainText()
        config.set('USER_PREFERENCES', 'statusMsg', statusMSG)
        with open('outputs.ini', 'w') as configfile:
            config.write(configfile)

    def announceUpdate(self):
        config = ConfigParser()
        config.read('outputs.ini')
        announcemsg = self.announcementPanel.toPlainText()
        config.set('USER_PREFERENCES', 'announcemsg', announcemsg)
        with open('outputs.ini', 'w') as configfile:
            config.write(configfile) 

      
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())




